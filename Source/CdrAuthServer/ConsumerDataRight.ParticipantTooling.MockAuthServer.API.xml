<?xml version="1.0"?>
<doc>
    <assembly>
        <name>CdrAuthServer</name>
    </assembly>
    <members>
        <member name="M:CdrAuthServer.Controllers.AuthorisationController.OutputAuthConfirmation(System.String,System.String,System.String)">
            <summary>
            This is used to generate html that can be used to Confirm/Cancel an authorisation
            request when in HeadlessMode.
            </summary>
            <returns>IActionResult</returns>
        </member>
        <member name="M:CdrAuthServer.Controllers.IntrospectionController.IntrospectInternal(System.String)">
            <summary>
            This controller action is used to check the validity of an access_token only.
            It should not be called by an external participant (i.e. ADR) but is consumed internally
            by the resource API of the mock data holder.
            In the CDS, the introspection endpoint only supports the introspection of refresh tokens.
            </summary>
            <param name="token">Access token to check</param>
            <returns>IntrospectionResult</returns>
            <remarks>
            There is currently no auth on this endpoint.  
            This could be added in the future to only allow the calls from the Mock Data Holder Resource API.
            </remarks>
        </member>
        <member name="M:CdrAuthServer.Controllers.JwksController.GenerateJwks">
            <summary>
            Generate a JWKS for the Auth Server.
            </summary>
            <returns>JsonWebKeySet</returns>
        </member>
        <member name="T:CdrAuthServer.Controllers.ResourceController">
            <summary>
            This controller is used to provide a resource endpoint for testing purposes, to
            ensure that the auth server is issuing access tokens correctly.
            </summary>
        </member>
        <member name="M:CdrAuthServer.Controllers.UtilityController.RemoveArrangementAndTriggerDataRecipientArrangementRevocation(System.String)">
            <summary>
            This controller method is provided to  delete the arrangement and refreshtoken in authserver and
            trigger an arrangement revocation at a data recipient.
            Normally, this would be done from the DH dashboard.  
            However, until a dashboard is in place this method can be used to trigger a request.
            </summary>
            <returns>IActionResult</returns>
            <remarks>
            Note: this controller action would not be implemented in a production system and is provided for testing purposes.
            </remarks>
        </member>
        <member name="M:CdrAuthServer.Extensions.HashExtensions.Sha256(System.String)">
            <summary>
            Creates a SHA256 hash of the specified input.
            </summary>
            <param name="input">The input.</param>
            <returns>A hash</returns>
        </member>
        <member name="M:CdrAuthServer.IdPermanence.CompressionExtensions.Compress(System.Byte[])">
            <summary>
            Compresses a byte array and returns a deflate compressed, byte array.
            </summary>
            <param name="uncompressedString">String to compress</param>
        </member>
        <member name="M:CdrAuthServer.IdPermanence.CompressionExtensions.Decompress(System.Byte[])">
            <summary>
            Decompresses a deflate compressed, byte array and returns an uncompressed byte array.
            </summary>
            <param name="compressedString">String to decompress.</param>
        </member>
        <member name="T:CdrAuthServer.IdPermanence.IdPermanenceHelper">
            <summary>
            Id Permanence Helper
            </summary>
        </member>
        <member name="M:CdrAuthServer.IdPermanence.IdPermanenceHelper.EncryptId(System.String,CdrAuthServer.IdPermanence.IdPermanenceParameters,System.String)">
            <summary>
            Encrypt an ID to meet ID Permanence rules.
            </summary>
            <param name="internalId">Internal ID (i.e. accountId, transactionId) to encrypt</param>
            <param name="idParameters">IdPermanenceParameters</param>
            <param name="privateKey">Private Key</param>
            <returns>Encrypted ID</returns>
        </member>
        <member name="M:CdrAuthServer.IdPermanence.IdPermanenceHelper.DecryptId(System.String,CdrAuthServer.IdPermanence.IdPermanenceParameters,System.String)">
            <summary>
            Decrypt an encrypted ID back to the internal value.
            </summary>
            <param name="encryptedId">Encrypted ID to decrypt back to internal value</param>
            <param name="idParameters">IdPermanenceParameters</param>
            <param name="privateKey">Private Key</param>
            <returns>Internal ID</returns>
        </member>
        <member name="M:CdrAuthServer.IdPermanence.IdPermanenceHelper.EncryptSub(System.String,CdrAuthServer.IdPermanence.SubPermanenceParameters,System.String)">
            <summary>
            Encrypt the internal customer id for inclusion as the "sub" claim in id_token and access_token.
            </summary>
            <param name="customerId">Internal Customer Id</param>
            <param name="subParameters">SubPermanenceParameters</param>
            <param name="privateKey">Private Key</param>
            <returns>Encrypted customer id to be included in sub claim</returns>
        </member>
        <member name="M:CdrAuthServer.IdPermanence.IdPermanenceHelper.DecryptSub(System.String,CdrAuthServer.IdPermanence.SubPermanenceParameters,System.String)">
            <summary>
            Decrypt the encrypted sub claim value from the access_token into the internal customer id.
            </summary>
            <param name="sub">Encrypted Customer Id found in sub claim of the access_token</param>
            <param name="subParameters">SubPermanenceParameters</param>
            <param name="privateKey">Private Key</param>
            <returns>Internal Customer Id</returns>
        </member>
        <member name="T:CdrAuthServer.IdPermanence.IdPermanenceManager">
            <summary>
            Id Permanence Manager
            </summary>
        </member>
        <member name="M:CdrAuthServer.IdPermanence.IdPermanenceManager.EncryptIds``1(System.Collections.Generic.IEnumerable{``0},CdrAuthServer.IdPermanence.IdPermanenceParameters,System.Linq.Expressions.Expression{System.Func{``0,System.String}}[])">
            <summary>
            Method to create permanence ids for specified properties in a list of objects
            </summary>
            <typeparam name="T">The type of list</typeparam>
            <param name="list">The list</param>
            <param name="idParameters">The permanence id parameters</param>
            <param name="idProperties">The specified id properties to create permanence ids for</param>
            <returns>The list with permanence ids set</returns>
        </member>
        <member name="M:CdrAuthServer.IdPermanence.IdPermanenceManager.EncryptId(System.String,CdrAuthServer.IdPermanence.IdPermanenceParameters)">
            <summary>
            Encrypt an ID to meet ID Permanence rules.
            </summary>
            <param name="internalId">Internal ID (i.e. accountId, transactionId) to encrypt</param>
            <param name="idParameters">IdPermanenceParameters</param>
            <returns>Encrypted ID</returns>
        </member>
        <member name="M:CdrAuthServer.IdPermanence.IdPermanenceManager.DecryptId(System.String,CdrAuthServer.IdPermanence.IdPermanenceParameters)">
            <summary>
            Decrypt an encrypted ID back to the internal value.
            </summary>
            <param name="encryptedId">Encrypted ID to decrypt back to internal value</param>
            <param name="idParameters">IdPermanenceParameters</param>
            <returns>Internal ID</returns>
        </member>
        <member name="M:CdrAuthServer.IdPermanence.IdPermanenceManager.EncryptSub(System.String,CdrAuthServer.IdPermanence.SubPermanenceParameters)">
            <summary>
            Encrypt the internal customer id for inclusion as the "sub" claim in id_token and access_token.
            </summary>
            <param name="customerId">Internal Customer Id</param>
            <param name="subParameters">SubPermanenceParameters</param>
            <returns>Encrypted customer id to be included in sub claim</returns>
        </member>
        <member name="M:CdrAuthServer.IdPermanence.IdPermanenceManager.DecryptSub(System.String,CdrAuthServer.IdPermanence.SubPermanenceParameters)">
            <summary>
            Decrypt the encrypted sub claim value from the access_token into the internal customer id.
            </summary>
            <param name="sub">Encrypted Customer Id found in sub claim of the access_token</param>
            <param name="subParameters">SubPermanenceParameters</param>
            <returns>Internal Customer Id</returns>
        </member>
        <member name="P:CdrAuthServer.Models.Client.ClientId">
            <summary>
            Gets a Data Holder issued client identifier string.
            </summary>
        </member>
        <member name="P:CdrAuthServer.Models.Client.ClientIdIssuedAt">
            <summary>
            Gets a time at which the client identifier was issued expressed as seconds since 1970-01-01T00:00:00Z as measured in UTC.
            </summary>
        </member>
        <member name="P:CdrAuthServer.Models.Client.ClientName">
            <summary>
            Gets a human-readable string name of the software product to be presented to the end-user during authorization.
            </summary>
        </member>
        <member name="P:CdrAuthServer.Models.Client.ClientDescription">
            <summary>
            Gets a human-readable string name of the software product description to be presented to the end user during authorization.
            </summary>
        </member>
        <member name="P:CdrAuthServer.Models.Client.ClientUri">
            <summary>
            URL string of a web page providing information about the client.
            </summary>
        </member>
        <member name="P:CdrAuthServer.Models.Client.LegalEntityId">
            <summary>
            Legal Entity Identifier.
            </summary>
        </member>
        <member name="P:CdrAuthServer.Models.Client.LegalEntityName">
            <summary>
            Legal Entity Name.
            </summary>
        </member>
        <member name="P:CdrAuthServer.Models.Client.OrgId">
            <summary>
            Gets a unique identifier string assigned by the CDR Register that identifies the Accredited Data Recipient Brand.
            </summary>
        </member>
        <member name="P:CdrAuthServer.Models.Client.OrgName">
            <summary>
            Gets a human-readable string name of the Accredited Data Recipient to be presented to the end user during authorization.
            </summary>
        </member>
        <member name="P:CdrAuthServer.Models.Client.RedirectUris">
            <summary>
            Gets an array of redirection URI strings for use in redirect-based flows.
            </summary>
        </member>
        <member name="P:CdrAuthServer.Models.Client.LogoUri">
            <summary>
            Gets a URL string that references a logo for the client. If present, the server SHOULD display this image to the end-user during approval.
            </summary>
        </member>
        <member name="P:CdrAuthServer.Models.Client.TosUri">
            <summary>
            Gets a URL string that points to a human-readable terms of service document for the Software Product.
            </summary>
        </member>
        <member name="P:CdrAuthServer.Models.Client.PolicyUri">
            <summary>
            Gets a URL string that points to a human-readable policy document for the Software Product.
            </summary>
        </member>
        <member name="P:CdrAuthServer.Models.Client.JwksUri">
            <summary>
            Gets a URL string referencing the client JSON Web Key (JWK) Set [RFC7517] document, which contains the client public keys.
            </summary>
        </member>
        <member name="P:CdrAuthServer.Models.Client.RevocationUri">
            <summary>
            Gets a URI string that references the location of the Software Product consent revocation endpoint.
            </summary>
        </member>
        <member name="P:CdrAuthServer.Models.Client.RecipientBaseUri">
            <summary>
            Gets or sets a URI string that references the location of the Software Product recipient base uri endpoint.
            </summary>
        </member>
        <member name="P:CdrAuthServer.Models.Client.TokenEndpointAuthMethod">
            <summary>
            Gets the requested authentication method for the token endpoint.
            </summary>
        </member>
        <member name="P:CdrAuthServer.Models.Client.TokenEndpointAuthSigningAlg">
            <summary>
            Gets the algorithm used for signing the JWT.
            </summary>
        </member>
        <member name="P:CdrAuthServer.Models.Client.GrantTypes">
            <summary>
            Gets an array of OAuth 2.0 grant type strings that the client can use at the token endpoint.
            </summary>
        </member>
        <member name="P:CdrAuthServer.Models.Client.ResponseTypes">
            <summary>
            Gets an array of the OAuth 2.0 response type strings that the client can use at the authorization endpoint.
            </summary>
        </member>
        <member name="P:CdrAuthServer.Models.Client.ApplicationType">
            <summary>
            Gets the kind of the application. The only supported application type will be 'web'.
            </summary>
        </member>
        <member name="P:CdrAuthServer.Models.Client.IdTokenSignedResponseAlg">
            <summary>
            Gets an algorithm with which an id_token is to be signed.
            </summary>
        </member>
        <member name="P:CdrAuthServer.Models.Client.IdTokenEncryptedResponseAlg">
            <summary>
            Gets a JWE &#x60;alg&#x60; algorithm with which an id_token is to be encrypted.
            </summary>
        </member>
        <member name="P:CdrAuthServer.Models.Client.IdTokenEncryptedResponseEnc">
            <summary>
            Gets a JWE &#x60;enc&#x60; algorithm with which an id_token is to be encrypted.
            </summary>
        </member>
        <member name="P:CdrAuthServer.Models.Client.RequestObjectSigningAlg">
            <summary>
            Gets an algorithm which the ADR expects to sign the request object if a request object will be part of the authorization request sent to the Data Holder.
            </summary>
        </member>
        <member name="P:CdrAuthServer.Models.Client.SoftwareStatementJwt">
            <summary>
            Gets the Software Statement Assertion, as defined in [Dynamic Client Registration](https://cdr-register.github.io/register/#dynamic-client-registration).
            </summary>
        </member>
        <member name="P:CdrAuthServer.Models.Client.SoftwareId">
            <summary>
            Gets a string representing a unique identifier assigned by the ACCC Register and used by registration endpoints to identify the software product to be dynamically registered. &lt;/br&gt;&lt;/br&gt;The \&quot;software_id\&quot; will remain the same for the lifetime of the product, across multiple updates and versions.
            </summary>
        </member>
        <member name="P:CdrAuthServer.Models.Client.SoftwareRoles">
            <summary>
            Gets a string representing the software roles as outlined in the SSA.
            </summary>
        </member>
        <member name="P:CdrAuthServer.Models.Client.Scope">
            <summary>
            Gets a string containing a space-separated list of scope values that the client can use when requesting access tokens.
            </summary>
        </member>
        <member name="P:CdrAuthServer.Models.Client.SectorIdentifierUri">
            <summary>
            Get the sector identifier uri used in PPID calculations.
            </summary>
        </member>
        <member name="P:CdrAuthServer.Models.Client.AuthorizationSignedResponseAlg">
            <summary>
            Gets an algorithm with which an id_token is to be signed.
            </summary>
        </member>
        <member name="P:CdrAuthServer.Models.Client.AuthorizationEncryptedResponseAlg">
            <summary>
            Gets a JWE &#x60;alg&#x60; algorithm with which an id_token is to be encrypted.
            </summary>
        </member>
        <member name="P:CdrAuthServer.Models.Client.AuthorizationEncryptedResponseEnc">
            <summary>
            Gets a JWE &#x60;enc&#x60; algorithm with which an id_token is to be encrypted.
            </summary>
        </member>
        <member name="P:CdrAuthServer.Models.ClientRegistrationRequest.SoftwareStatement">
            <summary>
            Gets a Software Statement Assertion, as defined in [Dynamic Client Registration](https://cdr-register.github.io/register/#dynamic-client-registration).
            </summary>
        </member>
        <member name="P:CdrAuthServer.Models.ClientRegistrationRequest.Kid">
            <summary>
            Gets the Key Identifier of this JWT.
            </summary>
        </member>
        <member name="P:CdrAuthServer.Models.ClientRegistrationRequest.Iat">
            <summary>
            Gets the time at which the request was issued by the TPP  expressed as seconds since 1970-01-01T00:00:00Z as measured in UTC.
            </summary>
        </member>
        <member name="P:CdrAuthServer.Models.ClientRegistrationRequest.Exp">
            <summary>
            Gets the time at which the request expires expressed as seconds since 1970-01-01T00:00:00Z as measured in UTC.
            </summary>
        </member>
        <member name="P:CdrAuthServer.Models.ClientRegistrationRequest.Iss">
            <summary>
            Gets a unique identifier for the Data Holder issued by the CDR Register.
            </summary>
        </member>
        <member name="P:CdrAuthServer.Models.ClientRegistrationRequest.Jti">
            <summary>
            Gets a unique identifier for the JWT, used to prevent replay of the token.
            </summary>
        </member>
        <member name="P:CdrAuthServer.Models.ClientRegistrationRequest.Aud">
            <summary>
            Gets the audience for the request. This should be the Data Holder authorisation server URI.
            </summary>
        </member>
        <member name="P:CdrAuthServer.Models.ClientRegistrationRequest.RedirectUris">
            <summary>
            Gets an array of redirection URI strings for use in redirect-based flows.
            </summary>
        </member>
        <member name="P:CdrAuthServer.Models.ClientRegistrationRequest.TokenEndpointAuthMethod">
            <summary>
            Gets the requested authentication method for the token endpoint.
            </summary>
        </member>
        <member name="P:CdrAuthServer.Models.ClientRegistrationRequest.TokenEndpointAuthSigningAlg">
            <summary>
            Gets the algorithm used for signing the JWT.
            </summary>
        </member>
        <member name="P:CdrAuthServer.Models.ClientRegistrationRequest.GrantTypes">
            <summary>
            Gets an array of OAuth 2.0 grant type strings that the client can use at the token endpoint.
            </summary>
        </member>
        <member name="P:CdrAuthServer.Models.ClientRegistrationRequest.ResponseTypes">
            <summary>
            Gets an array of the OAuth 2.0 response type strings that the client can use at the authorization endpoint.
            </summary>
        </member>
        <member name="P:CdrAuthServer.Models.ClientRegistrationRequest.ApplicationType">
            <summary>
            Gets the kind of the application. The only supported application type will be 'web'.
            </summary>
        </member>
        <member name="P:CdrAuthServer.Models.ClientRegistrationRequest.IdTokenSignedResponseAlg">
            <summary>
            Gets a algorithm with which an id_token is to be signed.
            </summary>
        </member>
        <member name="P:CdrAuthServer.Models.ClientRegistrationRequest.IdTokenEncryptedResponseAlg">
            <summary>
            Gets a JWE &#x60;alg&#x60; algorithm with which an id_token is to be encrypted.
            </summary>
        </member>
        <member name="P:CdrAuthServer.Models.ClientRegistrationRequest.IdTokenEncryptedResponseEnc">
            <summary>
            Gets a JWE &#x60;enc&#x60; algorithm with which an id_token is to be encrypted.
            </summary>
        </member>
        <member name="P:CdrAuthServer.Models.ClientRegistrationRequest.RequestObjectSigningAlg">
            <summary>
            Gets an algorithm which the ADR expects to sign the request object if a request object will be part of the authorization request sent to the Data Holder.
            </summary>
        </member>
        <member name="P:CdrAuthServer.Models.ClientRegistrationRequest.SoftwareStatementJwt">
            <summary>
            Gets the Software Statement Assertion
            </summary>
        </member>
        <member name="P:CdrAuthServer.Models.ClientRegistrationRequest.AuthorizationSignedResponseAlg">
            <summary>
            Gets a algorithm with which an auth request is to be signed (JARM).
            </summary>
        </member>
        <member name="P:CdrAuthServer.Models.ClientRegistrationRequest.AuthorizationEncryptedResponseAlg">
            <summary>
            Gets a JWE &#x60;alg&#x60; algorithm with which an auth request is to be encrypted (JARM).
            </summary>
        </member>
        <member name="P:CdrAuthServer.Models.ClientRegistrationRequest.AuthorizationEncryptedResponseEnc">
            <summary>
            Gets a JWE &#x60;enc&#x60; algorithm with which an auth request is to be encrypted (JARM).
            </summary>
        </member>
        <member name="P:CdrAuthServer.Models.SoftwareStatement.LegalEntityId">
            <summary>
            Gets a unique identifier assigned by the CDR Register that identifies the Accredited Data Recipient Legal Entity.
            </summary>
        </member>
        <member name="P:CdrAuthServer.Models.SoftwareStatement.LegalEntityName">
            <summary>
            Gets a Human-readable string name of the Accredited Data Recipient Legal Entity.
            </summary>
        </member>
        <member name="P:CdrAuthServer.Models.SoftwareStatement.OrgId">
            <summary>
            Gets a unique identifier string assigned by the CDR Register that identifies the Accredited Data Recipient Brand.
            </summary>
        </member>
        <member name="P:CdrAuthServer.Models.SoftwareStatement.OrgName">
            <summary>
            Gets a Human-readable string name of the Accredited Data Recipient to be presented to the end user during authorization.
            </summary>
        </member>
        <member name="P:CdrAuthServer.Models.SoftwareStatement.ClientName">
            <summary>
            Gets a Human-readable string name of the software product to be presented to the end-user during authorization.
            </summary>
        </member>
        <member name="P:CdrAuthServer.Models.SoftwareStatement.ClientDescription">
            <summary>
            Gets a Human-readable string name of the software product description to be presented to the end user during authorization.
            </summary>
        </member>
        <member name="P:CdrAuthServer.Models.SoftwareStatement.ClientUri">
            <summary>
            Gets a URL string of a web page providing information about the client.
            </summary>
        </member>
        <member name="P:CdrAuthServer.Models.SoftwareStatement.LogoUri">
            <summary>
            Gets a URL string that references a logo for the client. If present, the server SHOULD display this image to the end-user during approval
            </summary>
        </member>
        <member name="P:CdrAuthServer.Models.SoftwareStatement.TosUri">
            <summary>
            URL string that points to a human-readable terms of service document for the Software Product.
            </summary>
            <value>URL string that points to a human-readable terms of service document for the Software Product</value>
        </member>
        <member name="P:CdrAuthServer.Models.SoftwareStatement.PolicyUri">
            <summary>
            Gets a URL string that points to a human-readable policy document for the Software Product.
            </summary>
        </member>
        <member name="P:CdrAuthServer.Models.SoftwareStatement.JwksUri">
            <summary>
            Gets a URL string referencing the client JSON Web Key (JWK) Set [RFC7517] document, which contains the client public keys.
            </summary>
        </member>
        <member name="P:CdrAuthServer.Models.SoftwareStatement.RevocationUri">
            <summary>
            Gets a URI string that references the location of the Software Product consent revocation endpoint.
            </summary>
        </member>
        <member name="P:CdrAuthServer.Models.SoftwareStatement.RecipientBaseUri">
            <summary>
            Gets a URI string that references the location of the Software Product recipient base uri endpoint.
            </summary>
        </member>
        <member name="P:CdrAuthServer.Models.SoftwareStatement.SoftwareId">
            <summary>
            Gets a String representing a unique identifier assigned by the ACCC Register and used by registration endpoints to identify the software product to be dynamically registered. &lt;/br&gt;&lt;/br&gt;The \&quot;software_id\&quot; will remain the same for the lifetime of the product, across multiple updates and versions
            </summary>
        </member>
        <member name="P:CdrAuthServer.Models.SoftwareStatement.SoftwareRoles">
            <summary>
            Gets a String containing a the software role, e.g. data-recipient-software-product
            </summary>
        </member>
        <member name="P:CdrAuthServer.Models.SoftwareStatement.Scope">
            <summary>
            Gets a String containing a space-separated list of scope values that the client can use when requesting access tokens.
            </summary>
        </member>
        <member name="P:CdrAuthServer.Models.SoftwareStatement.RedirectUris">
            <summary>
            Gets an Array of redirection URI strings for use in redirect-based flows.
            </summary>
        </member>
        <member name="P:CdrAuthServer.Models.SoftwareStatement.SectorIdentifierUri">
             <summary>
            Sector Identifier Uri used in PPID calculations.
             </summary>
        </member>
        <member name="T:CdrAuthServer.SwaggerFilters.CustomDocumentFilter">
            <summary>
            The purpose of those filters is to get the auto-generated swagger into a consistent order to aid in comparison with the json schema defined at https://consumerdatastandardsaustralia.github.io/standards/includes/swagger/cds_register.json
            These orders don't neccessarily match yet, but we have the aim to better match them in the future and until they do, it's helpful to order them alphabetically to aid in searching for property manually.
            We are also exposing properties to the swagger auto-generation that are already set within the application, but don't show up on the autogeneration without this code.
            </summary>
        </member>
        <member name="M:CdrAuthServer.Validation.AuthorizeRequestValidator.Validate(CdrAuthServer.Models.AuthorizeRequest,CdrAuthServer.Configuration.ConfigurationOptions,System.Boolean)">
            <summary>
            Validates an auth request using the requestObject (from PAR endpoint) and
            the parameters passed directly to the auth endpoint (authRequest).
            </summary>
            <param name="authRequest">Parameters received on authorization endpoint</param>
            <param name="configOptions">configuration</param>
            <param name="checkGrantExpiredOrUsed">checkGrantExpiredOrUsed</param>
            <returns>
            AuthorizeRequestValidationResult containing a validated auth request object.
            </returns>
            <remarks>
            - The requestObject values take precedence over the authRequest values.
            - client_id and response_type must match the values in the request object.
            </remarks>
        </member>
        <member name="M:CdrAuthServer.Validation.ClientRegistrationValidator.ValidateSectorIdentifierUri(System.String)">
            <summary>
            Validate the sectory identifier url.
            Currently it is only required to call this endpoint and we do not validate the output.
            </summary>
        </member>
        <member name="M:CdrAuthServer.Validation.IJwtValidator.Validate(System.String,CdrAuthServer.Models.Client,CdrAuthServer.Validation.JwtValidationContext,CdrAuthServer.Configuration.ConfigurationOptions,System.Collections.Generic.IList{System.String},System.Collections.Generic.IList{System.String})">
            <summary>
            Validates a JWT against the JWKS endpoint of the client.
            </summary>
            <param name="jwt">JWT to validate</param>
            <param name="client">Client</param>
            <param name="context">client_assertion, request or access_token</param>
            <returns>ValidationResult and JwtSecurityToken</returns>
        </member>
    </members>
</doc>
