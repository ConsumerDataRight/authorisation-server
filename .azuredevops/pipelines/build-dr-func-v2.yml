# Build pipeline v2 (Containerised)

resources:
  repositories:
  - repository: MockRegister
    type: git
    name: sb-mock-register
    ref: develop

schedules:
- cron: '0 3 * * 0'
  displayName: 'Run at 3:00 AM every Sunday (UTC)'
  always: true
  branches:
    include:
    - develop

trigger:
  - develop
  - main
  - releases/*
  
pool:
  vmImage: ubuntu-latest

variables:
- group: artifacts

steps:

  ###################################################################################################
  # Checkout repositories
  ###################################################################################################

  - checkout: MockRegister
  - checkout: self

  ###################################################################################################
  # Build images
  ###################################################################################################

  # Authenticate to the Azure DevOps artifacts feed. The VSS_NUGET_ACCESSTOKEN environment variable is set from this task.
  - task: NuGetAuthenticate@1
    displayName: 'Authenticate to NuGet'

  # Build getdatarecipients
  - task: Bash@3
    displayName: Build getdatarecipients image
    inputs:
      targetType: inline
      script: |
        docker build $(Build.SourcesDirectory)/cdr-auth-server/Source -f $(Build.SourcesDirectory)/cdr-auth-server/Source/Dockerfile.get-data-recipients -t getdatarecipients:latest --build-arg FEED_ACCESSTOKEN=$(VSS_NUGET_ACCESSTOKEN) --build-arg FEED_URI=$(azdo_artifact_feed_uri)

  # Build getdatarecipients-integration-tests
  - task: Bash@3
    displayName: Build getdatarecipients-integration-tests image
    inputs:
      targetType: inline
      script: |
        docker build $(Build.SourcesDirectory)/cdr-auth-server/Source -f $(Build.SourcesDirectory)/cdr-auth-server/Source/Dockerfile.get-data-recipients.integration-tests -t getdatarecipients-integration-tests:latest --build-arg FEED_ACCESSTOKEN=$(VSS_NUGET_ACCESSTOKEN) --build-arg FEED_URI=$(azdo_artifact_feed_uri)

  # Build mock-register
  - task: Docker@2
    displayName: Build mock-register image
    inputs:
      command: build 
      # Dockerfile: $(Build.SourcesDirectory)/sb-mock-register/Source/Dockerfile.for-testing
      Dockerfile: $(Build.SourcesDirectory)/sb-mock-register/Source/Dockerfile
      buildContext: $(Build.SourcesDirectory)/sb-mock-register/Source
      repository: mock-register
      tags: latest
      
  # Build cdr-auth-server
  - task: Docker@2
    displayName: Build cdr-auth-server image
    inputs:
      command: build
      Dockerfile: $(Build.SourcesDirectory)/cdr-auth-server/Source/Dockerfile
      buildContext: $(Build.SourcesDirectory)/cdr-auth-server/Source
      repository: cdr-auth-server
      tags: latest

  # List docker images
  - task: Docker@2
    displayName: List Docker images
    condition: always() 
    inputs:
      command: images

  ###################################################################################################
  # Integration tests
  ###################################################################################################

  # Run integration tests
  - script: |
      docker compose --file $(Build.SourcesDirectory)/cdr-auth-server/Source/docker-compose.GetDataRecipients.IntegrationTests.yml up --abort-on-container-exit --exit-code-from getdatarecipients-integration-tests
    displayName: 'Integration Tests - Up'  

  # Remove integration tests
  - script: |
      docker compose --file $(Build.SourcesDirectory)/cdr-auth-server/Source/docker-compose.GetDataRecipients.IntegrationTests.yml down 
    displayName: 'Integration Tests - Down' 
    condition: always() 
 
  # NOTE - volume no longer mapped as 1001:121 (vsts:docker) in build pipeline and causes issue with chown in dockerfile (appuser:appgroup), ie stops register from starting because of different user
  # # Publish mock-register logs
  # - publish: $(Build.SourcesDirectory)/cdr-auth-server/Source/_temp/mock-register/tmp
  #   displayName: Publish MockRegister logs
  #   condition: always()
  #   artifact: Mock-Register - Logs

  # NOTE - See dockercompose, volume no longer mapped as 1001:121 (vsts:docker) in build pipeline and causes issue with chown in dockerfile (appuser:appgroup), ie stops register from starting because of different user
  # Publish mock-data-holder logs
  # - publish: $(Build.SourcesDirectory)/cdr-auth-server/Source/_temp/mock-data-holder/tmp
  #   displayName: Publish CDR Auth Server logs
  #   condition: always()
  #   artifact: Mock-Data-Holder - Logs

  # Login to ACR
  - task: Docker@2
    displayName: Login to ACR
    condition: always()
    inputs:
      command: login
      containerRegistry: $(AcrBaseUrl)

  # Run trx formatter to output .MD and .CSV
  - script: |
      docker run \
        -v=$(Build.SourcesDirectory)/cdr-auth-server/Source/_temp/getdatarecipients-integration-tests/testresults/results.trx:/app/results.trx:ro \
        -v=$(Build.SourcesDirectory)/cdr-auth-server/Source/_temp/getdatarecipients-integration-tests/testresults/formatted/:/app/out/:rw \
        $(AcrBaseUrl).azurecr.io/trx-formatter -i results.trx -t "CDRAuthServer-GetDataRecipients" --outputprefix "CDRAuthServer-GetDataRecipients" -o out/
    displayName: 'Run trx-formatter'  
    condition: always()   

  # Publish getdatarecipients integration tests results
  - publish: $(Build.SourcesDirectory)/cdr-auth-server/Source/_temp/getdatarecipients-integration-tests/testresults
    displayName: Publish integration tests
    condition: always()
    artifact: GetDataRecipients - Integration tests

  - task: PublishTestResults@2
    displayName: 'Surface Integration Test TRX results to devops'
    condition: succeededOrFailed()
    inputs:
      testResultsFormat: 'VSTest' # Options: JUnit, NUnit, VSTest, xUnit, cTest
      testResultsFiles: '**/results.trx' 
      searchFolder: $(Build.SourcesDirectory)/cdr-auth-server/Source/_temp/getdatarecipients-integration-tests/testresults
      testRunTitle: 'getdatarecipients-integration-tests' # Optional
      publishRunAttachments: true # Optional

  ###################################################################################################
  # Publish
  ###################################################################################################

  # Tests have passed, so now build/publish the azure function

  - task: UseDotNet@2
    displayName: 'Install .NET 8 SDK'
    inputs:
      packageType: 'sdk'
      version: '8.0.x'
      performMultiLevelLookup: true
  
  - script: |
      cd $(Build.SourcesDirectory)/cdr-auth-server/Source/CdrAuthServer.GetDataRecipients
      dotnet restore
      dotnet build --configuration Release
    displayName: 'Build CdrAuthServer.GetDataRecipients'

  - task: DotNetCoreCLI@2
    inputs:
      command: publish
      arguments: '--configuration Release --output publish_output'
      projects: '$(Build.SourcesDirectory)/cdr-auth-server/Source/CdrAuthServer.GetDataRecipients/CdrAuthServer.GetDataRecipients.csproj'
      publishWebProjects: false
      modifyOutputPath: false
      zipAfterPublish: false
    displayName: 'DotNet publish CdrAuthServer.GetDataRecipients'

  - task: ArchiveFiles@2    
    displayName: 'Archive CdrAuthServer.GetDataRecipients'    
    inputs:
      rootFolderOrFile: '$(System.DefaultWorkingDirectory)/publish_output'
      includeRootFolder: false
      archiveFile: '$(System.DefaultWorkingDirectory)/CdrAuthServer.GetDataRecipients.zip'

  - task: PublishBuildArtifacts@1
    displayName: 'Publish CdrAuthServer.GetDataRecipients'  
    inputs:
      PathToPublish: '$(System.DefaultWorkingDirectory)/CdrAuthServer.GetDataRecipients.zip'
      artifactName: 'functions'
