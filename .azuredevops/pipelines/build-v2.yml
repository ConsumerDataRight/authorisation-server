# Build pipeline v2 (Containerised)

schedules:
- cron: '0 3 * * 0'
  displayName: 'Run at 3:00 AM every Sunday (UTC)'
  always: true
  branches:
    include:
    - develop

trigger:
  - develop  
  - main  

variables:
- group: artifacts
- name: baseSourceDirectory
  value: $(Build.SourcesDirectory)/Source
- name: mockRegisterContainerTag
  ${{ if eq(variables['Build.SourceBranchName'], 'main') }}:
      value: main
  ${{ elseif contains(variables['Build.SourceBranch'], 'releases/') }}:
      value: $(MockRegisterReleaseContainerTag)
  ${{ else }}:
      value: develop

pool:
  vmImage: ubuntu-latest

jobs:
  - job: Build
    timeoutInMinutes: 120
    steps:

    ###################################################################################################
      # Set obligation date container tags
    ###################################################################################################

      - task: PowerShell@2
        displayName: Update Obligation date
        inputs:
          targetType: 'inline'
          script: |     
            $AuthServerObligationDate = "$(ObligationDate)"
            if (-not [string]::IsNullOrWhiteSpace( $AuthServerObligationDate )) {
              Write-Host "##vso[task.setvariable variable=ObligationDateTag]$AuthServerObligationDate"
            }
            else {
              Write-Host "##vso[task.setvariable variable=ObligationDateTag]23-3"        
            }

      # Set release version variables for release tags
      - task: PowerShell@2
        name: 'splitBranchName'
        displayName: 'Split Branch Name'  
        inputs:
          targetType: 'inline'
          script: |
            $branchParts = "$(Build.SourceBranchName)" -split '\.'
            # Write-Host "Branch Name: $branchParts"
            $majorVersion = $branchParts[0]
            $minorVersion = $branchParts[1]
            # Write-Host "Major Name: $majorVersion"
            Write-Host "##vso[task.setvariable variable=majorVersion]$majorVersion"
            Write-Host "##vso[task.setvariable variable=minorVersion]$minorVersion"      
            Write-Host "##vso[task.setvariable variable=majorMinorVersion]$majorVersion.$minorVersion"

      ###################################################################################################
      # Build images
      ###################################################################################################

      #!DF: This image is not used anywhere, so don't build.
      # Build cdr-auth-server
      # - task: Docker@2
      #   displayName: Build cdr-auth-server image
      #   inputs:
      #     command: build
      #     Dockerfile: $(baseSourceDirectory)/Dockerfile
      #     buildContext: $(baseSourceDirectory)
      #     repository: cdr-auth-server
      #     tags: latest

      ###################################################################################################
      # Unit tests 
      ###################################################################################################

      # Authenticate to the Azure DevOps artifacts feed. The VSS_NUGET_ACCESSTOKEN environment variable is set from this task.
      - task: NuGetAuthenticate@1
        displayName: 'Authenticate to NuGet'

      # Build cdr-auth-server-unit-tests
      # Pass in two build arguments:
      # 1. FEED_ACCESSTOKEN = VSS_NUGET_ACCESSTOKEN
      # 2. FEED_URI = Azure DevOps Artifacts Repository URI sourced from 'artifacts' variable group.
      - task: Docker@2
        displayName: Build cdr-auth-server-unit-tests image
        inputs:
          command: build 
          Dockerfile: $(baseSourceDirectory)/Dockerfile.unit-tests
          buildContext: $(baseSourceDirectory)
          repository: cdr-auth-server-unit-tests
          tags: latest
          arguments: '--build-arg FEED_ACCESSTOKEN=$(VSS_NUGET_ACCESSTOKEN) --build-arg FEED_URI=$(azdo_artifact_feed_uri)'

      # Run cdr-auth-server-unit-tests
      - script: |
          docker compose --file $(baseSourceDirectory)/docker-compose.UnitTests.yml up --abort-on-container-exit --exit-code-from cdr-auth-server-unit-tests
        displayName: 'Unit Tests - Up'  
        condition: always()
      
      # Remove unit tests      
      - script: |
          docker compose --file $(baseSourceDirectory)/docker-compose.UnitTests.yml down 
        displayName: 'Unit Tests - Down' 
        condition: always() 

      # Publish cdr-auth-server unit tests results
      - publish: $(baseSourceDirectory)/_temp/cdr-auth-server-unit-tests/testresults
        displayName: Publish cdr-auth-server unit tests
        condition: always()
        artifact:  Unit tests

      # Remove the cdr-auth-server-unit-tests container image.
      - script: |
          echo "Docker images before delete:"
          docker image ls
          docker system df
          echo "Delete image:"
          docker image rm cdr-auth-server-unit-tests -f
          echo "Docker images after delete:"
          docker image ls
          docker system df
        displayName: 'Remove cdr-auth-server-unit-tests container image' 
        condition: always() 

      ###################################################################################################
      # Login to ACR and pull mock solution containers 
      ###################################################################################################

      # Login to ACR
      - task: Docker@2
        displayName: Login to ACR
        condition: always()
        inputs:
          command: login
          containerRegistry: $(AcrBaseUrl)

      # Login to Shared ACR
      - task: Docker@2
        displayName: Login to Shared ACR
        inputs:
          command: login    
          containerRegistry: $(SpSharedAcr)
       
      # Pull and re-tag images from Azure ACR
      - task: Bash@3
        displayName: Pull docker images from ACR
        inputs:
          targetType: inline
          script: |
            docker pull $(AcrBaseUrl).azurecr.io/mock-register:$(mockRegisterContainerTag)
            docker tag $(AcrBaseUrl).azurecr.io/mock-register:$(mockRegisterContainerTag) mock-register:latest

      ###################################################################################################
      # Build Standalone container 
      ###################################################################################################

      - task: Bash@3
        displayName: Build cdr-auth-server-standalone image
        inputs:
          targetType: inline
          script: |
            docker build $(baseSourceDirectory) -f $(baseSourceDirectory)/Dockerfile.standalone -t cdr-auth-server-standalone:latest
            docker image ls

      ###################################################################################################
      # Integration tests
      ###################################################################################################

      # Build cdr-auth-server-integration-tests
      - task: Bash@3
        displayName: Build cdr-auth-server-integration-tests image
        inputs:
          targetType: inline
          script: |
            docker build $(baseSourceDirectory) -f $(baseSourceDirectory)/Dockerfile.integration-tests -t cdr-auth-server-integration-tests:latest --build-arg FEED_ACCESSTOKEN=$(VSS_NUGET_ACCESSTOKEN) --build-arg FEED_URI=$(azdo_artifact_feed_uri)
            docker image ls

      # Run Integration tests (Standalone)
      - script: |
          docker compose --file $(baseSourceDirectory)/docker-compose.IntegrationTests.Standalone.yml up --abort-on-container-exit --exit-code-from cdr-auth-server-integration-tests
        displayName: 'Integration Tests (Standalone) - Up'  
        condition: always()

      # Output Docker Logs
      - script: |
          docker logs mock-register
          docker logs cdr-auth-server-standalone
        displayName: 'Output Docker Logs'  
        condition: always()

      # Remove Integration tests (Standalone)
      - script: |
          docker compose --file $(baseSourceDirectory)/docker-compose.IntegrationTests.Standalone.yml down 
        displayName: 'Integration Tests (Standalone) - Down' 
        condition: always()

      # Run trx formatter to output .MD and .CSV
      - script: |
          docker run \
            -v=$(baseSourceDirectory)/_temp/cdr-auth-server-integration-tests-standalone/testresults/results.trx:/app/results.trx:ro \
            -v=$(baseSourceDirectory)/_temp/cdr-auth-server-integration-tests-standalone/testresults/formatted/:/app/out/:rw \
            $(AcrBaseUrl).azurecr.io/trx-formatter -i results.trx -t "CAS-Standalone" --outputprefix "CAS-Standalone" -o out/
        displayName: "Run trx-formatter (Standalone)"
        condition: always()

      # Publish tests
      - publish: $(baseSourceDirectory)/_temp/cdr-auth-server-integration-tests-standalone/testresults
        displayName: Publish cdr-auth-server-standalone Integration tests
        condition: always()
        artifact: Integration tests (Standalone)

      # Surface trx
      - task: PublishTestResults@2
        displayName: "Surface Integration Test (Standalone) TRX results to devops"
        condition: succeededOrFailed()
        inputs:
          testResultsFormat: "VSTest" # Options: JUnit, NUnit, VSTest, xUnit, cTest
          testResultsFiles: "**/results.trx"
          searchFolder: $(baseSourceDirectory)/_temp/cdr-auth-server-integration-tests-standalone/testresults # Optional
          testRunTitle: "cdr-auth-server-integration-tests-standalone" # Optional
          publishRunAttachments: true # Optional

      ###################################################################################################
      # Integration tests - JARM Encryption On
      ###################################################################################################

      # Run Integration tests (Standalone)
      - script: |          
          docker compose --file $(baseSourceDirectory)/docker-compose.IntegrationTests.Standalone.yml up --abort-on-container-exit --exit-code-from cdr-auth-server-integration-tests
        displayName: 'Integration Tests (Standalone) JARM Encryption On - Up'  
        condition: always()
        env:
          USE_JARM_ENCRYPTION: 'true'

      # Output Docker Logs
      - script: |
          docker logs mock-register
          docker logs cdr-auth-server-standalone
        displayName: 'Output Docker Logs'  
        condition: always()

      # Remove Integration tests (Standalone)
      - script: |
          docker compose --file $(baseSourceDirectory)/docker-compose.IntegrationTests.Standalone.yml down 
        displayName: 'Integration Tests (Standalone) JARM Encryption On - Down' 
        condition: always()

      # Run trx formatter to output .MD and .CSV
      - script: |
          docker run \
            -v=$(baseSourceDirectory)/_temp/cdr-auth-server-integration-tests-standalone/testresults/results.trx:/app/results.trx:ro \
            -v=$(baseSourceDirectory)/_temp/cdr-auth-server-integration-tests-standalone/testresults/formatted/:/app/out/:rw \
            $(AcrBaseUrl).azurecr.io/trx-formatter -i results.trx -t "CAS-Standalone" --outputprefix "CAS-Standalone" -o out/
        displayName: "Run trx-formatter (Standalone)"
        condition: always()

      # Publish tests
      - publish: $(baseSourceDirectory)/_temp/cdr-auth-server-integration-tests-standalone/testresults
        displayName: Publish cdr-auth-server-standalone Integration tests with JARM Encryption On 
        condition: always()
        artifact: Integration tests (Standalone) - JARM Encryption On 

      # Surface trx
      - task: PublishTestResults@2
        displayName: "Surface Integration Test (Standalone) JARM Encryption On TRX results to devops"
        condition: succeededOrFailed()
        inputs:
          testResultsFormat: "VSTest" # Options: JUnit, NUnit, VSTest, xUnit, cTest
          testResultsFiles: "**/results.trx"
          searchFolder: $(baseSourceDirectory)/_temp/cdr-auth-server-integration-tests-standalone/testresults # Optional
          testRunTitle: "cdr-auth-server-integration-tests-standalone-jarm-encryption-on" # Optional
          publishRunAttachments: true # Optional

      # Remove the cdr-auth-server-integration-tests container image.
      - script: |
          echo "Docker images before delete:"
          docker image ls
          echo "Delete image:"
          docker image rm cdr-auth-server-integration-tests -f
          echo "Docker images after delete:"
          docker image ls
          docker system df
        displayName: 'Remove cdr-auth-server-integration-tests container image' 
        condition: always() 

      # ###################################################################################################
      # # E2E tests
      # ###################################################################################################

      - task: Bash@3
        displayName: Build cdr-auth-server-e2e-tests image
        inputs:
          targetType: inline
          script: |
            docker build $(baseSourceDirectory) -f $(baseSourceDirectory)/Dockerfile.e2e-tests -t cdr-auth-server-e2e-tests:latest --build-arg FEED_ACCESSTOKEN=$(VSS_NUGET_ACCESSTOKEN) --build-arg FEED_URI=$(azdo_artifact_feed_uri)
            docker image ls

      # Run E2E tests (Standalone)
      - script: |
          docker compose --file $(baseSourceDirectory)/docker-compose.E2ETests.Standalone.yml up --abort-on-container-exit --exit-code-from cdr-auth-server-e2e-tests
        displayName: 'E2E Tests (Standalone) - Up'  
        condition: always()

      # Output Docker Logs
      - script: |
          docker logs mock-register
          docker logs cdr-auth-server-standalone
        displayName: 'Output Docker Logs'  
        condition: always()

      # Remove E2E tests (Standalone) 
      - script: |
          docker compose --file $(baseSourceDirectory)/docker-compose.E2ETests.Standalone.yml down 
        displayName: 'E2E Tests (Standalone) - Down' 
        condition: always()

      # Run trx formatter to output .MD and .CSV
      - script: |
          docker run \
            -v=$(baseSourceDirectory)/_temp/cdr-auth-server-e2e-tests-standalone/testresults/results.trx:/app/results.trx:ro \
            -v=$(baseSourceDirectory)/_temp/cdr-auth-server-e2e-tests-standalone/testresults/formatted/:/app/out/:rw \
            $(AcrBaseUrl).azurecr.io/trx-formatter -i results.trx -t "CAS-Standalone-E2E" --outputprefix "CAS-Standalone-E2E" -o out/
        displayName: "Run trx-formatter (Standalone)"
        condition: always()

      # Publish tests
      - publish: $(baseSourceDirectory)/_temp/cdr-auth-server-e2e-tests-standalone/testresults
        displayName: Publish cdr-auth-server-standalone E2E tests
        condition: always()
        artifact: E2E tests (Standalone)

      # Surface trx
      - task: PublishTestResults@2
        displayName: "Surface E2E Test (Standalone) TRX results to devops"
        condition: succeededOrFailed()
        inputs:
          testResultsFormat: "VSTest" # Options: JUnit, NUnit, VSTest, xUnit, cTest
          testResultsFiles: "**/results.trx"
          searchFolder: $(baseSourceDirectory)/_temp/cdr-auth-server-e2e-tests-standalone/testresults # Optional
          mergeTestResults: true # Optional
          testRunTitle: "cdr-auth-server-E2E-tests-standalone" # Optional
          publishRunAttachments: true # Optional

      ###################################################################################################
      # Remove images and clear build cache
      ###################################################################################################

      - script: |
          echo "Docker images before delete:"
          docker image ls

          echo "Clear docker build cache"
          docker builder prune -a -f

          echo "Delete images:"
          docker image rm cdr-auth-server-e2e-tests -f
          docker image rm mcr.microsoft.com/mssql/server:2022-latest -f
          docker image rm mock-register  -f

          echo "Docker images after delete:"
          docker image ls
          docker system df
        displayName: 'Remove container images that are no longer needed' 
        condition: always() 

      ###################################################################################################
      # Publish images
      ###################################################################################################

      # Save docker image to TAR so it can be published
      - task: Docker@2
        displayName: Save cdr-auth-server-standalone image to TAR
        inputs:
          repository: cdr-auth-server-standalone
          command: save
          arguments: --output $(build.artifactstagingdirectory)/cdr-auth-server-standalone.image.tar cdr-auth-server-standalone
          addPipelineData: false

      # Publish docker images
      - task: PublishPipelineArtifact@1
        displayName: Publish artifacts - Container images
        inputs:
          path: $(build.artifactstagingdirectory)
          artifact: Container Images

      # # FIXME - MJS - See dockercompose, volume no longer mapped as 1001:121 (vsts:docker) in build pipeline and causes issue with chown in dockerfile (appuser:appgroup), ie stops register from starting because of different user
      # # # Publish cdr-auth-server logs
      # # - publish: $(baseSourceDirectory)/_temp/cdr-auth-server/tmp
      # #   displayName: Publish cdr-auth-server logs
      # #   condition: always()
      # #   artifact: cdr-auth-server - Logs

      ###################################################################################################
      # EF migrations
      ###################################################################################################

      - task: UseDotNet@2
        displayName: "Use .NET 8 sdk"
        condition: always()
        inputs:
          packageType: sdk
          version: "8.0.x"
          performMultiLevelLookup: true

      - task: CmdLine@2
        displayName: "Install dotnet-ef"
        condition: always()
        inputs:
          script: "dotnet tool install --version 8.0.4 --global dotnet-ef"

      - task: CmdLine@2
        displayName: "Check dotnet-ef version"
        condition: always()
        inputs:
          script: "dotnet-ef"

      - script: |
          cd $(baseSourceDirectory)/CdrAuthServer.Repository
          dotnet ef migrations bundle --context CdrAuthServerDatabaseContext --verbose --self-contained
          ls -l
        displayName: "Run EF Migrations bundle"
        condition: always()
      
      - task: CopyFiles@2
        displayName: 'Copying appsettings files for efbundle'
        inputs:
          SourceFolder: '$(baseSourceDirectory)/CdrAuthServer'
          Contents: 'appsettings*.json'
          TargetFolder: '$(build.artifactstagingdirectory)/Database Migration Scripts'          
      - task: CopyFiles@2
        displayName: 'Copying efbundle to publish'
        inputs:
          SourceFolder: '$(baseSourceDirectory)/CdrAuthServer.Repository'
          Contents: 'efbundle'
          TargetFolder: '$(build.artifactstagingdirectory)/Database Migration Scripts'          
      - task: PublishBuildArtifacts@1
        displayName: 'Publish EF Migration bundle with appsettings'
        inputs:
          PathtoPublish: '$(build.artifactstagingdirectory)/Database Migration Scripts'
          ArtifactName: 'Database Migration Scripts'
          publishLocation: 'Container'      
    
      ###################################################################################################
      # Tag images and push to ACR
      ###################################################################################################

      - task: Docker@2
        displayName: 'Re-Tag CDRAuthServer (Standalone) container image with :branch-name'
        inputs:
          containerRegistry: $(AcrBaseUrl)
          repository: 'cdr-auth-server-standalone'
          command: tag
          arguments: 'cdr-auth-server-standalone $(AcrBaseUrl).azurecr.io/cdr-auth-server-standalone:$(Build.SourceBranchName)'

      - task: Docker@2
        displayName: 'Re-Tag CDRAuthServer (Standalone) API image with :latest (for develop branch only)'
        condition: and(succeeded(), eq(variables['Build.SourceBranch'], 'refs/heads/develop'))
        inputs:
          containerRegistry: $(AcrBaseUrl)
          repository: 'cdr-auth-server-standalone'
          command: tag
          arguments: 'cdr-auth-server-standalone $(AcrBaseUrl).azurecr.io/cdr-auth-server-standalone:latest'

      - task: CmdLine@2
        displayName: 'Push CDRAuthServer (Standalone) container image with :branch-name tag to ACR'
        inputs:
          script: 'docker push $(AcrBaseUrl).azurecr.io/cdr-auth-server-standalone:$(Build.SourceBranchName)' 

      - task: CmdLine@2
        displayName: 'Push CDRAuthServer (Standalone) container image with :latest tag to ACR (develop branch only)'
        condition: and(succeeded(), eq(variables['Build.SourceBranch'], 'refs/heads/develop'))
        inputs:
          script: 'docker push $(AcrBaseUrl).azurecr.io/cdr-auth-server-standalone:latest'

      ###################################################################################################
      # Tag images and push to Shared ACR
      ###################################################################################################
      # Pipeline variables are required : SharedAcrBaseUrl and SpSharedAcr

      # develop branch tags
      - task: Docker@2
        displayName: 'Re-Tag CDRAuthServer (Standalone) container API image with develop-latest (for develop branch only)'  
        condition: and(succeeded(), eq(variables['Build.SourceBranch'], 'refs/heads/develop'))  
        inputs:
          containerRegistry: $(SpSharedAcr)
          repository: 'cdr-auth-server-standalone'
          command: tag    
          arguments: 'cdr-auth-server-standalone $(SharedAcrBaseUrl).azurecr.io/cdr-auth-server-standalone:develop-latest'

      # develop-latest-obligation-date tag
      - task: Docker@2
        displayName: 'Re-Tag CDRAuthServer (Standalone) container API image with develop-latest-{obligation-date} (for develop branch only)'  
        condition: and(succeeded(), eq(variables['Build.SourceBranch'], 'refs/heads/develop'))
        inputs:
          containerRegistry: $(SpSharedAcr)
          repository: 'cdr-auth-server-standalone'
          command: tag        
          arguments: 'cdr-auth-server-standalone $(SharedAcrBaseUrl).azurecr.io/cdr-auth-server-standalone:develop-latest-$(ObligationDateTag)'
    
      # develop branch> build number tag only
      - task: Docker@2
        displayName: 'Re-Tag CDRAuthServer (Standalone) container API image with build number (for develop branch only)'  
        condition: and(succeeded(), eq(variables['Build.SourceBranch'], 'refs/heads/develop'))
        inputs:
          containerRegistry: $(SpSharedAcr)
          repository: 'cdr-auth-server-standalone'
          command: tag    
          arguments: 'cdr-auth-server-standalone $(SharedAcrBaseUrl).azurecr.io/cdr-auth-server-standalone:$(Build.BuildId)'

      # main branch tags
      # Pipeline variables are required : SharedAcrBaseUrl
      - task: Docker@2
        displayName: 'Re-Tag CDRAuthServer (Standalone) container API image with main-latest (for main branch only)'
        condition: and(succeeded(), eq(variables['Build.SourceBranch'], 'refs/heads/main'))
        inputs:
          containerRegistry: $(SpSharedAcr)
          repository: 'cdr-auth-server-standalone'
          command: tag    
          arguments: 'cdr-auth-server-standalone $(SharedAcrBaseUrl).azurecr.io/cdr-auth-server-standalone:main-latest'

      # main-latest-obligation-date tag
      - task: Docker@2
        displayName: 'Re-Tag CDRAuthServer (Standalone) container API image with main-latest-{obligation-date} (for main branch only)'
        condition: and(succeeded(), eq(variables['Build.SourceBranch'], 'refs/heads/main'))
        inputs:
          containerRegistry: $(SpSharedAcr)
          repository: 'cdr-auth-server-standalone'
          command: tag    
          arguments: 'cdr-auth-server-standalone $(SharedAcrBaseUrl).azurecr.io/cdr-auth-server-standalone:main-latest-$(ObligationDateTag)'

      # Build number tag
      - task: Docker@2
        displayName: 'Re-Tag CDRAuthServer (Standalone) container API image with build number (for main branch only)'
        condition: and(succeeded(), eq(variables['Build.SourceBranch'], 'refs/heads/main'))
        inputs:
          containerRegistry: $(SpSharedAcr)
          repository: 'cdr-auth-server-standalone'
          command: tag    
          arguments: 'cdr-auth-server-standalone $(SharedAcrBaseUrl).azurecr.io/cdr-auth-server-standalone:$(Build.BuildId)'

      # Re tag for full version for releases branch
      - task: Docker@2
        displayName: 'Re-Tag CDRAuthServer (Standalone) container API image with full version for releases branch'  
        # Cannot use releases/* wildcard 
        condition: eq(startsWith(variables['Build.SourceBranch'], 'refs/heads/releases/'), 'True')
        inputs:
          containerRegistry: $(SpSharedAcr)
          repository: 'cdr-auth-server-standalone'
          command: tag
          arguments: 'cdr-auth-server-standalone $(SharedAcrBaseUrl).azurecr.io/cdr-auth-server-standalone:$(Build.SourceBranchName)'

      # Re tag release full version and obligation date
      - task: Docker@2
        displayName: 'Re-Tag CDRAuthServer (Standalone) container API image with releases-{obligation-date} for releases branch'    
        condition: eq(startsWith(variables['Build.SourceBranch'], 'refs/heads/releases/'), 'True')
        inputs:
          containerRegistry: $(SpSharedAcr)
          repository: 'cdr-auth-server-standalone'
          command: tag
          arguments: 'cdr-auth-server-standalone $(SharedAcrBaseUrl).azurecr.io/cdr-auth-server-standalone:$(Build.SourceBranchName)-$(ObligationDateTag)'

      #  Re tag Major and Mnior Tags using above variables
      - task: Docker@2
        displayName: 'Re-Tag CDRAuthServer (Standalone) container image with major and minor tags for releases branch'    
        condition: eq(startsWith(variables['Build.SourceBranch'], 'refs/heads/releases/'), 'True')
        inputs:
          containerRegistry: $(SpSharedAcr)
          repository: 'cdr-auth-server-standalone'
          command: tag    
          arguments: 'cdr-auth-server-standalone $(SharedAcrBaseUrl).azurecr.io/cdr-auth-server-standalone:"$(majorMinorVersion)"'

      #  Re tag Major release Tag using above variables
      - task: Docker@2  
        displayName: 'Re-Tag CDRAuthServer (Standalone) container image with major tag for releases branch'    
        condition: eq(startsWith(variables['Build.SourceBranch'], 'refs/heads/releases/'), 'True')
        inputs:
          containerRegistry: $(SpSharedAcr)
          repository: 'cdr-auth-server-standalone'
          command: tag
          arguments: 'cdr-auth-server-standalone $(SharedAcrBaseUrl).azurecr.io/cdr-auth-server-standalone:"$(majorVersion)"'

      # Pushing develop branch tags changes to the ACR
      - task: CmdLine@2
        displayName: 'Push CDRAuthServer (Standalone) container container image with :develop-latest tag to ACR (develop branch only)'  
        condition: and(succeeded(), eq(variables['Build.SourceBranch'], 'refs/heads/develop'))
        inputs:
          script: 'docker push $(SharedAcrBaseUrl).azurecr.io/cdr-auth-server-standalone:develop-latest' 

      - task: CmdLine@2
        displayName: 'Push CDRAuthServer (Standalone) container container image with :develop-latest-obligation-date tag to ACR (develop branch only)'  
        condition: and(succeeded(), eq(variables['Build.SourceBranch'], 'refs/heads/develop'))
        inputs:    
          script: 'docker push $(SharedAcrBaseUrl).azurecr.io/cdr-auth-server-standalone:develop-latest-$(ObligationDateTag)'
    
      - task: CmdLine@2
        displayName: 'Push CDRAuthServer (Standalone) container container image with :build id tag to ACR (develop branch only)'  
        condition: and(succeeded(), eq(variables['Build.SourceBranch'], 'refs/heads/develop'))
        inputs:
          script: 'docker push $(SharedAcrBaseUrl).azurecr.io/cdr-auth-server-standalone:$(Build.BuildId)'

      # Pushing main branch tags changes to the ACR
      - task: CmdLine@2
        displayName: 'Push CDRAuthServer (Standalone) container container image with :main-latest tag to ACR (main branch only)'
        condition: and(succeeded(), eq(variables['Build.SourceBranch'], 'refs/heads/main'))
        inputs:
          script: 'docker push $(SharedAcrBaseUrl).azurecr.io/cdr-auth-server-standalone:main-latest'

      - task: CmdLine@2
        displayName: 'Push CDRAuthServer (Standalone) container container image with :main-latest-obligation-date tag to ACR (main branch only)'
        condition: and(succeeded(), eq(variables['Build.SourceBranch'], 'refs/heads/main'))
        inputs:
          script: 'docker push $(SharedAcrBaseUrl).azurecr.io/cdr-auth-server-standalone:main-latest-$(ObligationDateTag)'
    
      - task: CmdLine@2
        displayName: 'Push CDRAuthServer (Standalone) container container image with :build id tag to ACR (main branch only)'
        condition: and(succeeded(), eq(variables['Build.SourceBranch'], 'refs/heads/main'))
        inputs:
          script: 'docker push $(SharedAcrBaseUrl).azurecr.io/cdr-auth-server-standalone:$(Build.BuildId)'
        
      # Push  release full version Tag
      - task: CmdLine@2
        displayName: 'Push CDRAuthServer (Standalone) container container image with releases tags to ACR (releases branch only)'  
        condition: eq(startsWith(variables['Build.SourceBranch'], 'refs/heads/releases/'), 'True')
        inputs:
          script: 'docker push $(SharedAcrBaseUrl).azurecr.io/cdr-auth-server-standalone:$(Build.SourceBranchName)'

      # Push  release full version Tag and obligation date
      - task: CmdLine@2  
        displayName: 'Push CDRAuthServer (Standalone) container container image with releases tags to ACR (releases branch only)'  
        condition: eq(startsWith(variables['Build.SourceBranch'], 'refs/heads/releases/'), 'True')
        inputs:
          script: 'docker push $(SharedAcrBaseUrl).azurecr.io/cdr-auth-server-standalone:$(Build.SourceBranchName)-$(ObligationDateTag)'

      # Push Major and Minor release Tags using above variables
      - task: CmdLine@2  
        displayName: 'Push CDRAuthServer (Standalone) container container image with releases tags to ACR (releases branch only)'
        condition: eq(startsWith(variables['Build.SourceBranch'], 'refs/heads/releases/'), 'True')
        inputs:    
          script: 'docker push $(SharedAcrBaseUrl).azurecr.io/cdr-auth-server-standalone:"$(majorMinorVersion)"'
  
      # Push Major release Tag using above variables
      - task: CmdLine@2  
        displayName: 'Push CDRAuthServer (Standalone) container container image with releases tags to ACR (releases branch only)'
        condition: eq(startsWith(variables['Build.SourceBranch'], 'refs/heads/releases/'), 'True')
        inputs:
          script: 'docker push $(SharedAcrBaseUrl).azurecr.io/cdr-auth-server-standalone:"$(majorVersion)"'